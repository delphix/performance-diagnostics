##############################################################################
# Performance Playbook (estat, nfs_threads) collection 

# Collect output from "estat nfs -jm 10"
[[inputs.execd]]
  command = ["estat", "nfs", "-jm", "10"]
  name_override = "estat_nfs"
  signal = "none"
  restart_delay = "30s"
  data_format = "json"
  tag_keys = [
    "name",
    "axis"
  ]
  json_string_fields = ["iops(/s)", "avg latency(us)", "stddev(us)", "throughput(k/s)", "microseconds"]

# Collect output from "estat iscsi -jm 10"
[[inputs.execd]]
  command = ["estat", "iscsi", "-jm", "10"]
  name_override = "estat_iscsi"
  signal = "none"
  restart_delay = "30s"
  data_format = "json"
  tag_keys = [
    "name",
    "axis"
  ]
  json_string_fields = ["iops(/s)", "avg latency(us)", "stddev(us)", "throughput(k/s)", "microseconds"]

# Collect output from "estat zpl -jm 10"
[[inputs.execd]]
  command = ["estat", "zpl", "-jm", "10"]
  name_override = "estat_zpl"
  signal = "none"
  restart_delay = "30s"
  data_format = "json"
  tag_keys = [
    "name",
    "axis"
  ]
  json_string_fields = ["iops(/s)", "avg latency(us)", "stddev(us)", "throughput(k/s)", "microseconds"]

# Collect output from "estat backend-io -jm 10"
[[inputs.execd]]
  command = ["estat", "backend-io", "-jm", "10"]
  name_override = "estat_backend-io"
  signal = "none"
  restart_delay = "30s"
  data_format = "json"
  tag_keys = [
    "name",
    "axis"
  ]
  json_string_fields = ["iops(/s)", "avg latency(us)", "stddev(us)", "throughput(k/s)", "microseconds"]

# Collect output from "estat zvol -jm 10"
[[inputs.execd]]
  command = ["estat", "zvol", "-jm", "10"]
  name_override = "estat_zvol"
  signal = "none"
  restart_delay = "30s"
  data_format = "json"
  tag_keys = [
    "name",
    "axis"
  ]
  json_string_fields = ["iops(/s)", "avg latency(us)", "stddev(us)", "throughput(k/s)", "microseconds"]

# Collect output from "estat zio -jm 10"
[[inputs.execd]]
  command = ["estat", "zio", "-jm", "10"]
  name_override = "estat_zio"
  signal = "none"
  restart_delay = "30s"
  data_format = "json"
  tag_keys = [
    "name",
    "axis"
  ]
  json_string_fields = ["iops(/s)", "avg latency(us)", "stddev(us)", "throughput(k/s)", "microseconds"]

# Collect output from "estat metaslab-alloc -jm 10"
#[[inputs.execd]]
#  command = ["estat", "metaslab-alloc", "-jm", "10"]
#  name_override = "estat_metaslab-alloc"
#  signal = "none"
#  restart_delay = "30s"
#  data_format = "json"
#  tag_keys = [
#    "name",
#    "axis"
#  ]
#  json_string_fields = ["iops(/s)", "avg latency(us)", "stddev(us)", "throughput(k/s)", "microseconds"]

# Collect output from "nfs_threads"
[[inputs.execd]]
  command = ["/etc/telegraf/nfs-threads.sh"]
  name_override = "nfs_threads"
  signal = "none"
  restart_delay = "30s"
  data_format = "csv"
  csv_skip_columns = 2
  csv_column_names = ["packets","sockets","woken","used","metadata","riops","rtput","wiops","wtput"]
  csv_column_types = ["int", "int", "int", "int", "int", "float","string","float","string"]
  csv_delimiter = " "
  csv_trim_space = true

# End of Playbook section
##############################################################################

###############################################################################
#                         PROCESSOR PLUGINS                                   #
###############################################################################
# Convert strings from estat into integer values so they don't get dropped
[[processors.converter]]
  [processors.converter.fields]
    integer = ["iops(/s)", "avg latency(us)", "stddev(us)", "throughput(k/s)"]

# The estat output contains a nested latency histogram, so we need to 
# parse that out as a new array metric rather than a non-JSON string.
#
# From this:
#	"microseconds":"{20000,5},{30000,15},{40000,3},{50000,24}"
# to this:
#	"microseconds":"{20000:5,30000:15,40000:3,50000:24}"
#
# Clone the original so we have a "new" metric with a "hist_" name prefix
[[processors.clone]]
  order = 1
  name_prefix = "hist_"
  namepass = ["estat_*"]

# Rewrite the histograms for the "hist_estat_*" metrics as JSON objects
[[processors.regex]]
  order = 2
  namepass = ["hist_estat_*"]
  [[processors.regex.fields]]
    key = "microseconds"
    pattern = "{(\\d+),(\\d+)}"
    replacement = "\"${1}\":${2}"
  [[processors.regex.fields]]
    key = "microseconds"
    pattern = ".*"
    replacement = "{$0}"

# Now parse out the arrays for "hist_estat_*" metrics
[[processors.parser]]
  order = 3
  merge = "override"
  parse_fields = ["microseconds"]
  drop_original = false
  data_format = "json"
  namepass = ["hist_estat_*"]
  fieldpass = ["microseconds"]

# End of Processor section
##############################################################################
